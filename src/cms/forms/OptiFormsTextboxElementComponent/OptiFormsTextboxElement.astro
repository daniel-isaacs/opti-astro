---
import type {
    DisplaySettingsFragment,
    OptiFormsTextboxElement,
} from '../../../../__generated/sdk';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';
import {
    requiredValidatorMsg,
    emailValidatorMsg,
    numberValidatorMsg,
    regExpValidatorMsg,
    getRegularExpression,
} from '../formHelper';

// https://daisyui.com/components/input/

export interface Props {
    data: OptiFormsTextboxElement;
    contentPayload: ContentPayload;
    displaySettings: DisplaySettingsFragment[];
    Label?: string;
    Placeholder?: string;
    Tooltip?: string;
    PredefinedValue?: string;
    Validators?: any;
    AutoComplete?: string;
}
const { data, displaySettings } = Astro.props as Props;
const {
    Label,
    Placeholder,
    Tooltip,
    PredefinedValue,
    Validators,
    AutoComplete,
} = data;

const isRequiredErrorMsg = requiredValidatorMsg(Validators);
const isEmailErrorMsg = emailValidatorMsg(Validators);
const isNumberErrorMsg = numberValidatorMsg(Validators);
const isRegExpErrorMsg = regExpValidatorMsg(Validators);

const regularExpressionValue = isRegExpErrorMsg
    ? getRegularExpression(Validators)
    : undefined;

const inputType =
    (isEmailErrorMsg && 'email') || (isNumberErrorMsg && 'number') || 'text';
//  : isNumber ? 'number' : 'text';
// const validatorHint = isEmail
//     ? 'Enter valid email address'
//     : isNumber
//       ? 'Enter valid number'
//       : isRegExp
//         ? regularExpressionValue
//         : '';

// const inputId = `textbox-${Label?.replace(/\s+/g, '-')}-${Math.random().toString(36).substr(2, 4)}`;
const inputId = Label?.replace(/\s+/g, '-') || `textbox-${Math.random().toString(36).substr(2, 4)}`;

const errorIds = [
    isRequiredErrorMsg && `${inputId}-required-error`,
    isRegExpErrorMsg && `${inputId}-regexp-error`,
    isEmailErrorMsg && `${inputId}-email-error`,
    isNumberErrorMsg && `${inputId}-number-error`
].filter(Boolean).join(' ');
---

<label class="text-lg font-semibold" for={inputId}>
    {Label}
    {isRequiredErrorMsg && <span aria-label="required">*</span>}
</label>

<input
    id={inputId}
    name={inputId}
    type={inputType}
    class="input validator w-full"
    required={isRequiredErrorMsg ? true : false}
    aria-describedby={errorIds || undefined}
    placeholder={Placeholder}
    value={PredefinedValue}
    autocomplete={AutoComplete || 'off'}
    {...regularExpressionValue ? { pattern: regularExpressionValue } : {}}
    title={Tooltip}
/>
{
    isRequiredErrorMsg && (
        <div class="validator-hint">{isRequiredErrorMsg}</div>
    )
}
{
    isRegExpErrorMsg && (
        <div class="validator-hint">{isRegExpErrorMsg}</div>
    )
}
{
    isEmailErrorMsg && (
        <div class="validator-hint">{isEmailErrorMsg}</div>
    )
}
{
    isNumberErrorMsg && (
        <div class="validator-hint">{isNumberErrorMsg}</div>
    )
}

---
import type {
    DisplaySettingsFragment,
    OptiFormsRangeElement,
} from '../../../../__generated/sdk';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';

export interface Props {
    data: OptiFormsRangeElement;
    contentPayload: ContentPayload;
    displaySettings: DisplaySettingsFragment[];
    Label?: string;
    Tooltip?: string;
    PredefinedValue?: string;
    Min?: number;
    Max?: number;
    Increment?: number;
}
const { data, displaySettings } = Astro.props as Props;
const { Label, Tooltip, PredefinedValue, Min, Max, Increment } = data;

// Ensure non-null numbers with defaults
const safeMin: number = Min ?? 0;
const safeMax: number = Max ?? 10;
const safeIncrement: number = Increment ?? 1;

// Generate dynamic range labels
const rangeLabels = [];
for (let i = safeMin; i <= safeMax; i += safeIncrement) {
    rangeLabels.push(i);
}

const inputId = `textbox-${Label?.replace(/\s+/g, '-')}-${Math.random().toString(36).substr(2, 4)}`;
---

<fieldset class="fieldset w-full">
    <legend class="fieldset-legend validator text-lg font-semibold"
        >{Label}</legend
    >
    <div class="w-full max-w-xs">
        <input
            id={inputId}
            type="range"
            class="range w-full"
            min={Min}
            max={Max}
            value={PredefinedValue}
            step={Increment}
            title={Tooltip}
        />
        <div class="mt-2 flex justify-between px-2.5 text-xs">
            {rangeLabels.map((label) => <span>{label}</span>)}
        </div>
    </div>
</fieldset>

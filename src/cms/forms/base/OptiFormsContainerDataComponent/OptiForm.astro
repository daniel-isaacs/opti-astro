---
import { Image as AstroImage } from 'astro:assets';
import { actions } from 'astro:actions';
import type { Locales } from 'astro';
import { format } from 'date-fns';
import { getOptimizelySdk } from '../../../../graphql/getSdk';
import type { ContentPayload } from '../../../../graphql/shared/ContentPayload';
import { isEditContext } from '../../../shared/utils.ts';

import FormComponents from '../../_FormComponents.astro';
import { getRowStyles } from '../../../compositions/Row/RowHelper';
import { getGlobalStyles } from '../../../shared/globalStylesHelper';
import { getColumnStyles } from '../../../compositions/Column/ColumnHelper';

const isCmsEdit = isEditContext(Astro.url);

export interface Props {
    grid: any;
    contentPayload: ContentPayload;
}

const { grid, contentPayload } = Astro.props as Props;
const nodeType = grid.nodeType;

nodeType && (contentPayload.key = grid.key);

const optiResponse =
    !nodeType &&
    (await getOptimizelySdk(contentPayload).formById({
        key: contentPayload.key,
        //@ts-ignore
        loc: contentPayload.loc as Locales,
        ver: contentPayload.ver,
    }));

const formId = contentPayload.key || grid.key || 'opti-form';

const formGrid = optiResponse
    ? 'composition' in (optiResponse?._Component?.item ?? {})
        ? (optiResponse?._Component?.item as { composition?: any }).composition
        : optiResponse?._Component?.item
    : grid;
const formNodes = optiResponse
    ? 'composition' in (optiResponse?._Component?.item ?? {})
        ? (optiResponse?._Component?.item as { composition?: any }).composition
              ?.nodes
        : (optiResponse?._Component?.item as any)?.nodes
    : grid.nodes;

let nodeStyles: any[] = [];
let globalStyles: any[] = [];

if (nodeType === 'row') {
    nodeStyles = getRowStyles(formGrid);
    globalStyles = getGlobalStyles(formGrid);
} else if (nodeType === 'column') {
    nodeStyles = getColumnStyles(formGrid);
    globalStyles = getGlobalStyles(formGrid);
}
const styles = [...nodeStyles, ...globalStyles];

const formTitle = formGrid.component?.Title || formGrid.Title || null;
const formDescription =
    formGrid.component?.Description || formGrid.Description || null;
const formSubmitConfirmationMsg =
    formGrid.component?.SubmitConfirmationMessage ||
    formGrid.SubmitConfirmationMessage ||
    null;
const formResetConfirmationMsg =
    formGrid.component?.ResetConfirmationMessage ||
    formGrid.ResetConfirmationMessage ||
    null;
const formSubmitUrl =
    formGrid.component?.SubmitUrl?.default ||
    formGrid.SubmitUrl?.default ||
    null;
const showSummaryMessage: boolean =
    formGrid.component?.ShowSummaryMessageAfterSubmission ||
    formGrid.ShowSummaryMessageAfterSubmission ||
    false;

---

{
    (nodeType === 'section' || !nodeType) && (
        <div class="vb:section flex flex-col" data-epi-block-id={formGrid.key}>
            <form
                id={formId}
                class="mx-auto mb-4 w-full rounded bg-white px-8 pt-6 pb-8 shadow-md"
            >
                {formSubmitUrl && (
                    <input type="hidden" name="formSubmitUrl" value={formSubmitUrl} />
                )}
                {formTitle && (
                    <h2 class="mb-4 text-2xl font-bold">{formTitle}</h2>
                )}
                {formDescription && <p class="mb-4">{formDescription}</p>}
                {formNodes?.map((step: any) => (
                    <Astro.self contentPayload={contentPayload} grid={step} />
                ))}
            </form>
        </div>

        <div data-form-id={formId} data-submit-message={formSubmitConfirmationMsg}></div>
        <script>
            import { actions } from "astro:actions";
            import { isInputError } from "astro:actions";

            const element = document.querySelector('[data-form-id]') as HTMLElement;
            const formId = element?.dataset.formId || 'opti-form';
            const submitMessage = element?.dataset.submitMessage || "Form submitted, thank you.";

            function clearPreviousMessage(id: string) {
                const messageElement = document.getElementById(id);
                if (messageElement) {
                    messageElement.remove();
                }
            }

            function addMessageElement(
                message: string,
                type: "error" | "success",
                element: HTMLElement
            ) {
                const p = document.createElement("p");
                p.id = "message";
                p.className = `message ${type === "success" ? "text-teal-500" : "text-pink-500"} mt-2 px-2`;
                p.innerText = message;
                element.appendChild(p);
            }

            function clearInput(formElement: HTMLFormElement) {
                formElement.reset();                
            }

            function renderMessage(error: any, data: any, form: HTMLElement) {
                if (error && isInputError(error)) {
                    const message = error.fields.email && error.fields.email[0];
                    addMessageElement(message || "", "error", form);
                } else {
                    if (data?.formSubmitErrors) {
                        const message = data?.formSubmitErrors.message;
                        addMessageElement(message, "error", form);
                    } else {
                        const message = submitMessage || "Form submitted successfully.";
                        clearInput(form as HTMLFormElement);
                        addMessageElement(message, "success", form);
                    }
                }
            }

            const form = document.getElementById(formId) as HTMLFormElement;

            async function handleFormSubmit(e: Event) {
                e.preventDefault();

                const formData = new FormData(form);
                const { data, error } = await actions.submitForm(formData);
                clearPreviousMessage("message");
                renderMessage(error, data, form);
            }

            form.addEventListener("submit", handleFormSubmit);
        </script>


    )
}

{
    nodeType === 'step' && (
        <div class="vb:step flex flex-col" data-epi-block-id={formGrid.key}>
            {formGrid.nodes?.map((row: any) => (
                <Astro.self contentPayload={contentPayload} grid={row} />
            ))}
        </div>
    )
}

{
    nodeType === 'row' && (
        <div
            class="vb:row flex flex-row flex-wrap justify-start gap-4"
            class:list={styles}
            data-epi-block-id={formGrid.key}
        >
            {formGrid.nodes?.map((column: any) => (
                <Astro.self contentPayload={contentPayload} grid={column} />
            ))}
        </div>
    )
}

{
    nodeType === 'column' && (
        <div
            class="vb:col flex flex-1 flex-col flex-nowrap justify-start"
            class:list={styles}
            data-epi-block-id={formGrid.key}
        >
            {formGrid.nodes?.map((item: any) => (
                <FormComponents contentPayload={contentPayload} data={item} />
            ))}
        </div>
    )
}

<style is:inline>
    input:invalid {
        border: 2px dashed red;
    }

    input:valid {
        border: 2px solid black;
    }
</style>

{
    /*

        <!-- // Switch based on nodeType
        switch (nodeType) {
            case "section":
                return (
                    <div key={key} className="flex flex-col vb:section" data-epi-block-id={key}>
                        {nodes?.map((childNode: any) => RenderCompositionNode(childNode, formState))}
                    </div>
                );

            case "step":
                return (
                    <div key={key} className="flex flex-col vb:step" data-epi-block-id={key}>
                        {nodes?.map((childNode: any) => RenderCompositionNode(childNode, formState))}
                    </div>
                );

            case "row":
                return (
                    <div key={key} className="flex flex-row flex-wrap justify-start vb:row gap-4" data-epi-block-id={key}>
                        {nodes?.map((childNode: any) => RenderCompositionNode(childNode, formState))}
                    </div>
                );

            case "column":
                return (
                    <div key={key} className="flex-1 flex flex-col flex-nowrap justify-start vb:col" data-epi-block-id={key}>
                        {nodes?.map((childNode: any) => RenderCompositionNode(childNode, formState))}
                    </div>
                );

            default:
                // Handle any other nodeType or fallback to generic structure
                return (
                    <div key={key} className="flex flex-col vb:generic" data-epi-block-id={key}>
                        {nodes?.map((childNode: any) => RenderCompositionNode(childNode, formState))}
                    </div>
                ); -->



<!-- 
{
    grid.rows?.map((row: any) => (
        <Row contentPayload={contentPayload} row={row} />
    ))
} -->

        <!-- <div className="relative w-lg flex-1 vb:outline">
            <div className="relative w-lg flex-1 vb:outline">
                {form?.composition?.grids?.map((grid: any) =>
                    <div key={grid.key} className="relative w-lg flex flex-col flex-nowrap justify-start vb:grid"
                        data-epi-block-id={grid.key}>
                        {RenderCompositionNode(grid, formState)}
                    </div>
                )}
            </div>
        </div> -->

 */
}

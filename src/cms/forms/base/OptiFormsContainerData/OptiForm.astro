---

import { Image as AstroImage } from 'astro:assets';
import type { Locales } from 'astro';
import { format } from 'date-fns';
import { getOptimizelySdk } from '../../../../graphql/getSdk';
import type { ContentPayload } from '../../../../graphql/shared/ContentPayload';
import { isEditContext } from '../../../shared/utils.ts';

import FormComponents from '../../_FormComponents.astro';

const isCmsEdit = isEditContext(Astro.url);

export interface Props {
    grid: any;
    contentPayload: ContentPayload;
}

const { grid, contentPayload } = Astro.props as Props;
const nodeType = grid.nodeType;

contentPayload.key = grid.key;

const optiResponse = await getOptimizelySdk(contentPayload).formById({
    key: contentPayload.key,
    //@ts-ignore
    loc: contentPayload.loc as Locales,
    ver: contentPayload.ver,
});


// console.log('OptiForm payload:', JSON.stringify(contentPayload, null, 2));
// console.log('Optimizely Form Response:', JSON.stringify(optiResponse, null, 2));
console.log('grid:', JSON.stringify(grid, null, 2));

console.log('OptiForm nodeType:', nodeType);

// const form = optiResponse?._Page?.item as ArticlePageFragment;
// const publishedDate = format(
//     new Date(post?._metadata?.published ?? Date.now()),
//     'dd MMM yyyy'
// );

---

{ nodeType === 'section' && 
    <div class="flex flex-col vb:section" data-epi-block-id={grid.key}>
        {grid.rows?.map((rows: any) => (
            <Astro.self contentPayload={contentPayload} grid={rows} />
        ))}
    </div>
}

{ nodeType === 'step' && 
    <div class="flex flex-col vb:step" data-epi-block-id={grid.key}>
        {grid.nodes?.map((step: any) => (
            <Astro.self contentPayload={contentPayload} grid={step} />
        ))}
    </div>
}

{ nodeType === 'row' && 
    <div class="flex flex-row flex-wrap justify-start vb:row gap-4" data-epi-block-id={grid.key}>
        {grid.columns?.map((column: any) => (
            <Astro.self contentPayload={contentPayload} grid={column} />
        ))}
    </div>
}

{ nodeType === 'column' && 
    <div class="flex flex-row flex-wrap justify-start vb:row gap-4" data-epi-block-id={grid.key}>
        {grid.nodes?.map((item: any) => (
            <FormComponents contentPayload={contentPayload} data={item} />
        ))}
    </div>
}




        <!-- // Switch based on nodeType
        switch (nodeType) {
            case "section":
                return (
                    <div key={key} className="flex flex-col vb:section" data-epi-block-id={key}>
                        {nodes?.map((childNode: any) => RenderCompositionNode(childNode, formState))}
                    </div>
                );

            case "step":
                return (
                    <div key={key} className="flex flex-col vb:step" data-epi-block-id={key}>
                        {nodes?.map((childNode: any) => RenderCompositionNode(childNode, formState))}
                    </div>
                );

            case "row":
                return (
                    <div key={key} className="flex flex-row flex-wrap justify-start vb:row gap-4" data-epi-block-id={key}>
                        {nodes?.map((childNode: any) => RenderCompositionNode(childNode, formState))}
                    </div>
                );

            case "column":
                return (
                    <div key={key} className="flex-1 flex flex-col flex-nowrap justify-start vb:col" data-epi-block-id={key}>
                        {nodes?.map((childNode: any) => RenderCompositionNode(childNode, formState))}
                    </div>
                );

            default:
                // Handle any other nodeType or fallback to generic structure
                return (
                    <div key={key} className="flex flex-col vb:generic" data-epi-block-id={key}>
                        {nodes?.map((childNode: any) => RenderCompositionNode(childNode, formState))}
                    </div>
                ); -->



<!-- 
{
    grid.rows?.map((row: any) => (
        <Row contentPayload={contentPayload} row={row} />
    ))
} -->

        <!-- <div className="relative w-lg flex-1 vb:outline">
            <div className="relative w-lg flex-1 vb:outline">
                {form?.composition?.grids?.map((grid: any) =>
                    <div key={grid.key} className="relative w-lg flex flex-col flex-nowrap justify-start vb:grid"
                        data-epi-block-id={grid.key}>
                        {RenderCompositionNode(grid, formState)}
                    </div>
                )}
            </div>
        </div> -->
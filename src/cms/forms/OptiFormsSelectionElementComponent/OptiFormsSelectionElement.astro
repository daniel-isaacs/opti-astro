---
// https://daisyui.com/components/select/

import type {
    DisplaySettingsFragment,
    OptiFormsSelectionElement,
} from '../../../../__generated/sdk';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';
import { requiredValidatorMsg } from '../formHelper';

//// Example of Selection JSON structure:
// "Options": [
//   {
//     "label": "Choice 1",
//     "value": "Choice 1",
//     "selected": false
//   },
//   {
//     "label": "Choice 2",
//     "value": "Choice 2",
//     "selected": false
//   }
// ],
// "AllowMultiSelect": true,

export interface Props {
    data: OptiFormsSelectionElement;
    contentPayload: ContentPayload;
    displaySettings: DisplaySettingsFragment[];
    Label?: string;
    Tooltip?: string;
    Options?: any;
    Validators?: any;
    AllowMultiSelect?: boolean;
    AutoComplete?: string;
}
const { data, displaySettings } = Astro.props as Props;
const { Label, Tooltip, Options, Validators, AllowMultiSelect, AutoComplete } =
    data;

const isRequiredErrorMsg = requiredValidatorMsg(Validators);

const inputId = `selection-${Label?.replace(/\s+/g, '-')}-${Math.random().toString(36).substr(2, 4)}`;
---

<fieldset class="fieldset w-full">
    <legend class="fieldset-legend text-lg font-semibold">{Label}</legend>
    <select
        class="select w-full"
        id={inputId}
        name={inputId}
        autocomplete={AutoComplete || 'off'}
        multiple={AllowMultiSelect}
    >
        <option disabled selected>{Tooltip}</option>
        {
            (Array.isArray(Options) ? Options : []).map(
                (opt: { label: string; value: string; selected?: boolean }) => (
                    <option value={opt.value} selected={opt.selected}>
                        {opt.label}
                    </option>
                )
            )
        }
    </select>
</fieldset>

---
import { Image as AstroImage } from 'astro:assets';
import { randomBytes } from 'crypto';
import type {
ArticleListFragment,
ArticlePageExcerptFragment,
DisplaySettingsFragment,
} from '../../../../__generated/sdk';
import { getOptimizelySdk } from '../../../graphql/getSdk';
import type { ContentPayload } from '../../../graphql/shared/ContentPayload';
import { getDictionaryFromDisplaySettings } from '../../../graphql/shared/displaySettingsHelpers';
import LinkButton from '../ButtonComponent/LinkButton.astro';
import { isEditContext } from '../../shared/utils.ts';

const isCmsEdit = isEditContext(Astro.url);

export interface Props {
    key: string;
    data: ArticleListFragment;
    displaySettings: DisplaySettingsFragment[];
    contentPayload: ContentPayload;
}
const { key, data, displaySettings, contentPayload } = Astro.props as Props;
const currentSite = data.IncludeAllSites ? null : Astro.url.origin;
const articlesList = await getOptimizelySdk(contentPayload).getArticles({
    //@ts-ignore
    loc: contentPayload.loc,
    site: currentSite,
    limit: data.NumberOfArticles || 1,
    rootUrl: data.ArticleRoot?.url?.default || '/',
});
const glideId = randomBytes(5).toString('hex');
const items = articlesList.ArticlePage?.items || null;

// Get style settings from display settings
const styleDictionary = getDictionaryFromDisplaySettings(displaySettings);

// Layout settings
const layoutStyle = styleDictionary['layoutStyle'] || 'grid';
const gridColumns = styleDictionary['gridColumns'] || 'col4';
const imagePosition = styleDictionary['imagePosition'] || 'top';

// Build dynamic classes for cards based on settings
// Default to 'zoom_subtle' if no hover effect is specified
const hoverEffect = styleDictionary['hoverEffect'] || 'zoom_subtle';
const shadowValue = styleDictionary['cardShadow'] || 'sm';
const hoverShadowValue = styleDictionary['hoverShadow'] || 'lg';

// Grid container classes based on settings
const gridContainerClasses = {
    // Grid layout
    'grid gap-8': layoutStyle === 'grid',
    'grid-cols-1': layoutStyle === 'grid',
    'sm:grid-cols-2': layoutStyle === 'grid' && (gridColumns === 'col2' || gridColumns === 'col3' || gridColumns === 'col4'),
    'lg:grid-cols-3': layoutStyle === 'grid' && (gridColumns === 'col3' || gridColumns === 'col4'),
    'xl:grid-cols-4': layoutStyle === 'grid' && gridColumns === 'col4',
    'xl:grid-cols-3': layoutStyle === 'grid' && gridColumns === 'col3',
    'xl:grid-cols-2': layoutStyle === 'grid' && gridColumns === 'col2',
    'xl:grid-cols-1': layoutStyle === 'grid' && gridColumns === 'col1',
    // List layout
    'flex flex-col gap-6': layoutStyle === 'list',
};

// Build dynamic card class list for style-based classes
const cardDynamicClasses = {
    // Layout direction
    'flex-row': layoutStyle === 'list' && imagePosition === 'left',
    'flex-row-reverse': layoutStyle === 'list' && imagePosition === 'right',
    'flex-col': imagePosition === 'top' || layoutStyle === 'grid',
    // Override default shadow if specified
    'shadow-none': shadowValue === 'none',
    'shadow-md': shadowValue === 'md',
    'shadow-lg': shadowValue === 'lg',
    'shadow-xl': shadowValue === 'xl',
    // Hover shadow classes
    'hover:shadow-md': hoverShadowValue === 'md',
    'hover:shadow-lg': hoverShadowValue === 'lg',
    'hover:shadow-xl': hoverShadowValue === 'xl',
    'hover:shadow-2xl': hoverShadowValue === 'xxl',
    // Hover zoom effects
    'transition-transform duration-300 hover:scale-105': hoverEffect === 'zoom',
    'transition-transform duration-300 hover:scale-[1.02]': hoverEffect === 'zoom_subtle',
    // Add overflow hidden for zoom effects
    'overflow-hidden': hoverEffect === 'zoom' || hoverEffect === 'zoom_subtle',
};

// Figure classes for horizontal layout
const figureClasses = {
    'w-1/3 flex-shrink-0': layoutStyle === 'list' && (imagePosition === 'left' || imagePosition === 'right'),
};
---

<div data-epi-block-id={isCmsEdit && key || undefined}>
    <h1 class="w-full basis-full">{data?.Title}</h1>
    <div class="mt-4 mb-4" class:list={[gridContainerClasses]}>
        {
            //@ts-ignore
            items?.map((item: ArticlePageExcerptFragment, i) => {
                return (
                    <div class="card bg-base-100 shadow-sm flex" class:list={[cardDynamicClasses]}>
                        <figure class:list={[figureClasses]}>
                            <AstroImage
                                class="aspect-3/2 object-cover w-full h-full"
                                src={((item.PromoImage as any)?.item?.Url || item.PromoImage?.url?.default) ?? '/article-list-placeholder-markus-winkler-aId-xYRTlEc-unsplash.jpg'}
                                alt={item.PromoImage?.item?.AltText || item.PromoImage?.item?._metadata?.displayName || `Promo image for ${item.Heading}` || 'Article promo image'}
                                width={600}
                                height={400}
                            />
                        </figure>
                        <div class="card-body">
                            <h2 class="card-title">{item.Heading}</h2>
                            { item.Body?.html &&
                                <div set:html={item.Body.html.replace(/<[^>]*>/g, '').split(' ').slice(0, 30).join(' ') + "..."} />
                            }
                            <div class="card-actions justify-end mt-auto">
                            <LinkButton cssClasses="btn-primary" link={item._metadata?.url?.hierarchical}>Read more</LinkButton>
                            </div>
                        </div>
                    </div>
                );
            })
        }
    </div>
</div>
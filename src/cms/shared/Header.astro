---
import { Image as AstroImage } from 'astro:assets';

import { getCurrentLocale, getRelativeLocaleUrl } from '../../lib/locale-utils';
import type { SiteSettingsByHostnameQuery } from '../../../__generated/sdk';
import { getClassForLogo } from './siteSettingsHelper';
import SearchPalette from './SearchPalette.astro';
import ThemePicker from './ThemePicker.astro';

const lang = getCurrentLocale(Astro);

// Define interfaces for the menu items to fix TypeScript errors
interface LinkType {
    text: string;
    url: {
        default: string;
    };
}

interface MenuItemType {
    Link: LinkType;
    LinkText?: string;
    SubMenuItems?: MenuItemType[];
}

interface Props {
    siteSettings: SiteSettingsByHostnameQuery;
}

const { siteSettings } = Astro.props;
const settings = siteSettings?.SiteSettings?.item;

const topNavStyle = settings?.TopNavStyle || 'standard';
const logoUrl = (settings?.Logo as any)?.item?.Url || settings?.Logo?.url?.default || null;
const logoCss = getClassForLogo(settings?.LogoResolution);

const headerItems = settings?.HeaderLinks as MenuItemType[] | undefined;
const headerItemCount = headerItems?.length || 0;
---

<header class="sticky top-0 z-50 bg-gray-50/70 backdrop-blur-sm">
    <div class="navbar bg-base-100 shadow-sm">
        <div class="navbar-start">
            <!-- ============================================ -->
            <!-- MOBILE NAVIGATION - Conditional based on topNavStyle -->
            <!-- ============================================ -->
            
            {topNavStyle === 'standard' ? (
                <!-- Standard mode: Original daisyUI dropdown (mobile only) -->
                <div class="dropdown lg:hidden">
                    <div tabindex="0" role="button" class="btn btn-ghost">
                        <svg
                            xmlns="http://www.w3.org/2000/svg"
                            class="h-5 w-5"
                            fill="none"
                            viewBox="0 0 24 24"
                            stroke="currentColor"
                        >
                            <path
                                stroke-linecap="round"
                                stroke-linejoin="round"
                                stroke-width="2"
                                d="M4 6h16M4 12h8m-8 6h16"></path>
                        </svg>
                    </div>
                    <ul
                        tabindex="0"
                        class="menu menu-sm dropdown-content bg-base-100 rounded-box z-1 mt-3 w-52 p-2 text-lg shadow"
                    >
                        {
                            headerItems &&
                                headerItemCount &&
                                headerItemCount > 0 &&
                                headerItems.map((data) => (
                                    <li>
                                        {(!data?.SubMenuItems ||
                                            data?.SubMenuItems?.length == 0) && (
                                            <a
                                                class="text-lg text-gray-500 transition hover:text-gray-500/75"
                                                href={
                                                    data?.Link?.url?.default || '#'
                                                }
                                            >
                                                {data?.LinkText || data?.Link?.text || ''}
                                            </a>
                                        )}

                                        {data?.SubMenuItems &&
                                            data?.SubMenuItems?.length > 0 && (
                                                <details>
                                                    <summary class="text-lg text-gray-500 transition hover:text-gray-500/75">
                                                        {data?.LinkText || data?.Link?.text || ''}
                                                    </summary>
                                                    <ul class="p-2">
                                                        {data?.SubMenuItems
                                                            ?.length > 0 &&
                                                            data?.SubMenuItems.map(
                                                                (subdata: any) => (
                                                                    <li class="text-lg text-gray-500 transition hover:text-gray-500/75">
                                                                        <a
                                                                            class="text-lg transition hover:text-gray-500/75"
                                                                            href={
                                                                                subdata
                                                                                    ?.Link
                                                                                    ?.url
                                                                                    ?.default ||
                                                                                '#'
                                                                            }
                                                                        >
                                                                            {subdata?.LinkText ||
                                                                             subdata
                                                                                ?.Link
                                                                                ?.text ||
                                                                                ''}
                                                                        </a>
                                                                    </li>
                                                                )
                                                            )}
                                                    </ul>
                                                </details>
                                            )}
                                    </li>
                                ))
                        }
                    </ul>
                </div>
            ) : (
                <!-- Drawer mode: Hamburger button on ALL breakpoints -->
                <button 
                    id="drawer-menu-button"
                    class="btn btn-ghost"
                    aria-label="Open menu"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M4 6h16M4 12h8m-8 6h16"></path>
                    </svg>
                </button>
            )}
            
            <!-- Logo -->
            <a
                class="block px-8 text-teal-600"
                href={getRelativeLocaleUrl(lang, '/')}
            >
                <span class="sr-only">Home</span>
                <AstroImage
                    class:list={[logoCss, "w-full object-contain max-w-full"]}
                    src={logoUrl ?? '/optimizely-logo.svg'}
                    alt="Logo"
                    width=300
                    height=300
                />
            </a>
        </div>
        
        <!-- ============================================ -->
        <!-- STANDARD DESKTOP NAVIGATION -->
        <!-- Only show when topNavStyle === 'standard' -->
        <!-- ============================================ -->
        {topNavStyle === 'standard' && (
            <div class="navbar-center hidden lg:flex">
                <ul class="menu menu-horizontal px-1 text-lg">
                    {
                        headerItems &&
                            headerItemCount > 0 &&
                            headerItems.map((data) => (
                                <li>
                                    {(!data?.SubMenuItems ||
                                        data?.SubMenuItems?.length == 0) && (
                                        <a
                                            class="text-gray-500 transition hover:text-gray-500/75"
                                            href={data?.Link?.url?.default || '#'}
                                        >
                                            {data?.LinkText || data?.Link?.text || ''}
                                        </a>
                                    )}

                                    {data?.SubMenuItems &&
                                        data?.SubMenuItems?.length > 0 && (
                                            <div class="dropdown dropdown-hover pb-2">
                                                <div
                                                    tabindex="0"
                                                    role="button"
                                                    class="mb-2 text-gray-500 transition hover:text-gray-500/75"
                                                >
                                                    {data?.LinkText || data?.Link?.text || ''}
                                                </div>
                                                <ul
                                                    tabindex="0"
                                                    class="dropdown-content menu bg-base-200 rounded-box z-1 w-52 text-lg shadow-sm"
                                                >
                                                    {data?.SubMenuItems?.length >
                                                        0 &&
                                                        data?.SubMenuItems.map(
                                                            (subdata: any) => (
                                                                <li class="text-gray-500 transition hover:text-gray-500/75">
                                                                    <a
                                                                        href={
                                                                            subdata
                                                                                ?.Link
                                                                                ?.url
                                                                                ?.default ||
                                                                            '#'
                                                                        }
                                                                    >
                                                                        {subdata?.LinkText ||
                                                                            subdata
                                                                            ?.Link
                                                                            ?.text ||
                                                                            ''}
                                                                    </a>
                                                                </li>
                                                            )
                                                        )}
                                                </ul>
                                            </div>
                                        )}
                                </li>
                            ))
                    }
                </ul>
            </div>
        )}
        
        <!-- Right Side Actions -->
        <div class="navbar-end" x-data>
            <!-- Search input -->
            <div class="relative hidden lg:block">
                <input
                    id="search-input"
                    type="text"
                    placeholder="Search... (⌘K / Ctrl+K)"
                    class="input input-bordered input-sm w-44 pl-10 pr-4"
                    readonly
                    @click="$dispatch('open-command-palette')"
                />
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="absolute left-3 top-1/2 h-4 w-4 -translate-y-1/2 text-gray-400"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
                    ></path>
                </svg>
            </div>
            <!-- Search button -->
            <button
                id="search-button"
                @click="$dispatch('open-command-palette')"
                class="btn btn-ghost btn-circle lg:hidden"
                aria-label="Search"
            >
                <svg
                    xmlns="http://www.w3.org/2000/svg"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke-width="1.5"
                    stroke="currentColor"
                    class="h-5 w-5"
                >
                    <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        d="m21 21-5.197-5.197m0 0A7.5 7.5 0 1 0 5.196 5.196a7.5 7.5 0 0 0 10.607 10.607Z"
                    ></path>
                </svg>
            </button>
            <!-- Theme switcher dropdown -->
            <ThemePicker />
            <a class="btn" href="https://home.optimizely.com/">Log In</a>
        </div>
    </div>
</header>

<!-- ============================================ -->
<!-- DRAWER NAVIGATION SYSTEM -->
<!-- Only rendered when topNavStyle === 'drawer' -->
<!-- ============================================ -->
{topNavStyle === 'drawer' && (
<div id="drawer-container">
    <!-- Overlay -->
    <div 
        id="drawer-overlay" 
        class="fixed inset-0 bg-black/50 z-[60] opacity-0 pointer-events-none transition-opacity duration-700 ease-in-out"
    ></div>
    
    <!-- Main Drawer -->
    <div 
        id="main-drawer" 
        class="fixed top-0 left-0 h-full w-full sm:w-80 bg-base-100 shadow-xl z-[70] -translate-x-full transition-all duration-700 ease-in-out"
    >
        <div class="flex flex-col h-full">
            <!-- Drawer Header -->
            <div class="flex items-center justify-between p-4 border-b border-base-300">
                <h2 class="text-xl font-semibold">Menu</h2>
                <button 
                    id="close-drawer-button" 
                    class="btn btn-ghost btn-sm btn-circle"
                    aria-label="Close menu"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-6 w-6"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M6 18L18 6M6 6l12 12"
                        />
                    </svg>
                </button>
            </div>
            
            <!-- Main Menu Items -->
            <nav class="flex-1 overflow-y-auto">
                <ul class="menu p-4 text-lg">
                    {
                        headerItems &&
                            headerItemCount > 0 &&
                            headerItems.map((data, index) => (
                                <li>
                                    {(!data?.SubMenuItems ||
                                        data?.SubMenuItems?.length == 0) ? (
                                        <a
                                            class="text-gray-500 transition hover:text-gray-500/75 py-3"
                                            href={data?.Link?.url?.default || '#'}
                                        >
                                            {data?.LinkText || data?.Link?.text || ''}
                                        </a>
                                    ) : (
                                        <button
                                            class="submenu-trigger text-gray-500 transition hover:text-gray-500/75 py-3 flex items-center justify-between w-full"
                                            data-index={index}
                                            data-title={data?.LinkText || data?.Link?.text || ''}
                                            data-items={JSON.stringify(data?.SubMenuItems || [])}
                                        >
                                            <span>{data?.LinkText || data?.Link?.text || ''}</span>
                                            <svg
                                                xmlns="http://www.w3.org/2000/svg"
                                                class="h-5 w-5"
                                                fill="none"
                                                viewBox="0 0 24 24"
                                                stroke="currentColor"
                                            >
                                                <path
                                                    stroke-linecap="round"
                                                    stroke-linejoin="round"
                                                    stroke-width="2"
                                                    d="M9 5l7 7-7 7"
                                                />
                                            </svg>
                                        </button>
                                    )}
                                </li>
                            ))
                    }
                </ul>
            </nav>
        </div>
    </div>
    
    <!-- Submenu Drawer -->
    <div 
        id="submenu-drawer" 
        class="fixed top-0 left-0 h-full w-full sm:w-80 bg-base-100 shadow-xl z-[65] -translate-x-full transition-all duration-700 ease-in-out"
    >
        <div class="flex flex-col h-full">
            <!-- Submenu Header -->
            <div class="flex items-center justify-between p-4 border-b border-base-300">
                <button 
                    id="back-button" 
                    class="btn btn-ghost btn-sm gap-2"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M15 19l-7-7 7-7"
                        />
                    </svg>
                    Back
                </button>
                <h2 id="submenu-title" class="text-xl font-semibold"></h2>
                <!-- Close button for mobile -->
                <button 
                    id="close-submenu-drawer-button" 
                    class="btn btn-ghost btn-sm btn-circle sm:hidden"
                    aria-label="Close menu"
                >
                    <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-6 w-6"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                    >
                        <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M6 18L18 6M6 6l12 12"
                        />
                    </svg>
                </button>
            </div>
            
            <!-- Submenu Items -->
            <nav class="flex-1 overflow-y-auto">
                <ul id="submenu-items" class="menu p-4 text-lg">
                    <!-- Submenu items will be inserted here dynamically -->
                </ul>
            </nav>
        </div>
    </div>
</div>
)}

<!-- Search Palette Component -->
<SearchPalette />

<!-- ============================================ -->
<!-- DRAWER NAVIGATION JAVASCRIPT -->
<!-- Works for both mobile (standard mode) -->
<!-- and all breakpoints (drawer mode) -->
<!-- ============================================ -->
<script>
    function initializeDrawer() {
        const drawerMenuButton = document.getElementById('drawer-menu-button');
        const closeDrawerButton = document.getElementById('close-drawer-button');
        const closeSubmenuDrawerButton = document.getElementById('close-submenu-drawer-button');
        const backButton = document.getElementById('back-button');
        const overlay = document.getElementById('drawer-overlay');
        const mainDrawer = document.getElementById('main-drawer');
        const submenuDrawer = document.getElementById('submenu-drawer');
        const submenuTitle = document.getElementById('submenu-title');
        const submenuItems = document.getElementById('submenu-items');
        
        // Open main drawer
        function openMainDrawer() {
            overlay?.classList.remove('pointer-events-none', 'opacity-0');
            overlay?.classList.add('pointer-events-auto', 'opacity-100');
            mainDrawer?.classList.remove('-translate-x-full');
            mainDrawer?.classList.add('translate-x-0');
            document.body.style.overflow = 'hidden';
        }
        
        // Close all drawers
        function closeAllDrawers() {
            const isSubmenuOpen = submenuDrawer?.classList.contains('translate-x-0');

            // First, trigger the submenu to close.
            closeSubmenuDrawer();
            
            const closeMain = () => {
                overlay?.classList.remove('pointer-events-auto', 'opacity-100');
                overlay?.classList.add('pointer-events-none', 'opacity-0');
                mainDrawer?.classList.remove('translate-x-0');
                mainDrawer?.classList.add('-translate-x-full');
                document.body.style.overflow = '';
            };

            if (isSubmenuOpen) {
                // If submenu was open, delay closing the main drawer for a sequential animation.
                setTimeout(closeMain, 650);
            } else {
                // If only main drawer was open, close it immediately.
                closeMain();
            }
        }
        
        // Open submenu drawer
        function openSubmenuDrawer(title: string, items: any[]) {
            if (submenuTitle) submenuTitle.textContent = title;
            
            // Clear existing items
            if (submenuItems) submenuItems.innerHTML = '';
            
            // Add new items
            items.forEach(item => {
                const li = document.createElement('li');
                const a = document.createElement('a');
                a.className = 'text-gray-500 transition hover:text-gray-500/75 py-3';
                a.href = item?.Link?.url?.default || '#';
                a.textContent = item?.LinkText || item?.Link?.text || '';
                li.appendChild(a);
                submenuItems?.appendChild(li);
            });
            
            // Position submenu drawer based on screen size
            if (submenuDrawer) {
                const isSmallScreen = window.matchMedia('(max-width: 639px)').matches;
                
                if (isSmallScreen) {
                    submenuDrawer.style.left = '0';
                } else {
                    // Pre-position the submenu behind the main drawer before animating
                    submenuDrawer.style.left = '0';
                    setTimeout(() => submenuDrawer.style.left = '320px', 0); // Animate to the side
                }
                
                submenuDrawer.style.zIndex = isSmallScreen ? '75' : '65';
                
                submenuDrawer.classList.remove('-translate-x-full');
                submenuDrawer.classList.add('translate-x-0');
            }
        }
        
        // Close submenu drawer
        function closeSubmenuDrawer() {
            const isSmallScreen = window.matchMedia('(max-width: 639px)').matches;
            if (submenuDrawer && !isSmallScreen) {
                // On non-mobile, first slide it back behind the main drawer
                submenuDrawer.style.left = '0';
                
                // After the 'left' transition finishes, then hide it completely
                setTimeout(() => {
                    submenuDrawer.classList.remove('translate-x-0');
                    submenuDrawer.classList.add('-translate-x-full');
                }, 700); // This must match the CSS transition duration
            } else {
                // On mobile, just slide it out immediately
                submenuDrawer?.classList.remove('translate-x-0');
                submenuDrawer?.classList.add('-translate-x-full');
            }
        }
        
        // Event listeners
        drawerMenuButton?.addEventListener('click', openMainDrawer);
        closeDrawerButton?.addEventListener('click', closeAllDrawers);
        closeSubmenuDrawerButton?.addEventListener('click', closeAllDrawers);
        overlay?.addEventListener('click', closeAllDrawers);
        backButton?.addEventListener('click', closeSubmenuDrawer);
        
        // Handle submenu triggers
        document.querySelectorAll('.submenu-trigger').forEach(button => {
            button.addEventListener('click', function() {
                const title = this.getAttribute('data-title') || '';
                const itemsJson = this.getAttribute('data-items') || '[]';
                try {
                    const items = JSON.parse(itemsJson);
                    openSubmenuDrawer(title, items);
                } catch (e) {
                    console.error('Error parsing submenu items:', e);
                }
            });
        });
    }
    
    // Initialize on page load (for Astro View Transitions)
    document.addEventListener('astro:page-load', initializeDrawer);
</script>

<!-- Keyboard shortcut for search -->
<script is:inline>
    document.addEventListener('keydown', function(e) {
        // Cmd+K (Mac) or Ctrl+K (Windows/Linux)
        if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
            e.preventDefault();
            window.dispatchEvent(new CustomEvent('open-command-palette'));
        }
    });
</script>

<style>
    /* Ensure smooth transitions with custom timing */
    #submenu-drawer {
        /* By default, only transition the transform property (for closing on mobile) */
        transition: transform 700ms ease-in-out;
    }
    #submenu-drawer.translate-x-0 {
        /* When open, transition both transform and left to slide out/in from behind */
        transition: transform 700ms ease-in-out, left 700ms ease-in-out;
    }
    
    /* Prevent body scroll when drawer is open */
    body.drawer-open {
        overflow: hidden;
    }
</style>
---
// /src/pages/opti-admin/graph-pinnedresults.astro
import AdminLayout from '../../layouts/AdminLayout.astro';
import { checkAdminAuth } from './auth-opti-admin';

// Check authentication
const authError = checkAdminAuth(Astro.request);
if (authError) {
    return authError;
}

export const prerender = false;

let message = Astro.url.searchParams.get('message');
let messageType = Astro.url.searchParams.get('status') || 'success';
let collections = [];

// Handle form submissions
if (Astro.request.method === 'POST') {
  try {
    const formData = await Astro.request.formData();
    const action = formData.get('action') as string;

    if (action === 'create-collection') {
      const title = formData.get('collectionTitle') as string;
      const isActive = formData.get('collectionActive') === 'on';

      try {
        const { makeHmacApiRequest } = await import('../../../utils/optimizely-graph-utils');
        
        const response = await makeHmacApiRequest('/api/pinned/collections', {
          method: 'POST',
          body: { title, isActive }
        });

        if (response.ok) {
          message = `Collection "${title}" created successfully!`;
          messageType = 'success';
        } else {
          const errorText = await response.text();
          message = `Failed to create collection: ${response.status} ${response.statusText} - ${errorText}`;
          messageType = 'error';
        }
      } catch (error) {
        message = error instanceof Error ? error.message : 'Failed to create collection';
        messageType = 'error';
      }
    } else if (action === 'add-pinned-item') {
      const collectionId = formData.get('selectedCollectionId') as string;
      const phrasesRaw = formData.get('phrases') as string;
      const phrases = phrasesRaw.split('\n').filter(p => p.trim()).join('\n');
      const targetKey = formData.get('targetKey') as string;
      const language = formData.get('language') as string || 'en';
      const priority = parseInt(formData.get('priority') as string) || 1;
      const isActive = formData.get('itemActive') === 'on';

      try {
        const { makeHmacApiRequest } = await import('../../../utils/optimizely-graph-utils');
        
        const requestBody = {
          collectionId,
          phrases,
          targetKey,
          language,
          priority: priority,
          isActive: isActive
        };

        const response = await makeHmacApiRequest(`/api/pinned/collections/${collectionId}/items`, {
          method: 'POST',
          body: requestBody
        });

        if (response.ok) {
          message = `Pinned item added successfully!`;
          messageType = 'success';
        } else {
          const errorText = await response.text();
          message = `Failed to add pinned item: ${response.status} ${response.statusText} - ${errorText}`;
          messageType = 'error';
        }
      } catch (error) {
        message = error instanceof Error ? error.message : 'Failed to add pinned item';
        messageType = 'error';
      }
    } else if (action === 'delete-collection') {
      const collectionId = formData.get('collectionId') as string;
      const collectionTitle = formData.get('collectionTitle') as string;

      try {
        const { makeHmacApiRequest } = await import('../../../utils/optimizely-graph-utils');
        const response = await makeHmacApiRequest(`/api/pinned/collections/${collectionId}`, {
          method: 'DELETE'
        });

        if (response.ok) {
          message = `Collection "${collectionTitle}" deleted successfully!`;
          messageType = 'success';
        } else {
          const errorText = await response.text();
          message = `Failed to delete collection: ${response.status} ${response.statusText} - ${errorText}`;
          messageType = 'error';
        }
      } catch (error) {
        message = error instanceof Error ? error.message : 'Failed to delete collection';
        messageType = 'error';
      }
    }
  } catch (error) {
    message = error instanceof Error ? error.message : 'An unexpected error occurred';
    messageType = 'error';
  }
}

// Load existing collections on page load
try {
  const { makeHmacApiRequest } = await import('../../../utils/optimizely-graph-utils');
  
  const response = await makeHmacApiRequest('/api/pinned/collections', {
    method: 'GET'
  });
  
  if (response.ok) {
    const result = await response.json();
    collections = Array.isArray(result) ? result : [result];
  } else {
    console.error('Failed to load collections from API:', await response.text());
  }
} catch (error) {
  console.error('Failed to load collections:', error);
  collections = [];
}
---

<AdminLayout title="Optimizely Graph - Pinned Results Manager">
  <div class="max-w-6xl">
    <div class="mb-8">
      <h1 class="text-3xl font-bold text-gray-900 mb-2">Pinned Results Manager</h1>
      <p class="text-gray-600">
        Manage collections and pinned results for Optimizely Graph search. Pinned results promote specific content 
        when users search for particular phrases, displaying them at the top of search results.
      </p>
    </div>

    <!-- Notes Section -->
    <div class="mb-6 space-y-3">
      <h2 class="text-xl font-semibold text-gray-900 mb-3">Notes</h2>

      <!-- How Pinned Results Work -->
      <details class="bg-blue-50 border-l-4 border-blue-400 rounded group">
        <summary class="cursor-pointer p-4 hover:bg-blue-100 transition-colors select-none list-none [&::-webkit-details-marker]:hidden">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-blue-800 inline-flex items-center">
              <svg class="w-5 h-5 mr-2 transform transition-transform group-open:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
              How Pinned Results Work
            </h3>
            <span class="text-xs text-blue-600 font-medium">Click to expand</span>
          </div>
        </summary>
        <div class="px-4 pb-4 text-sm text-blue-700">
          <p class="mb-2"><strong>Collections:</strong> Group related pinned results together for easier management</p>
          <p class="mb-2"><strong>Search Phrases:</strong> When users search for these terms, your pinned content appears first</p>
          <p class="mb-2"><strong>Content GUIDs:</strong> Each pinned result targets specific content using its unique identifier</p>
          <p class="text-xs mt-3">Higher priority items (1-100) appear before lower priority items when multiple results match the same phrase.</p>
        </div>
      </details>

      <!-- Important Notes -->
      <details class="bg-yellow-50 border-l-4 border-yellow-400 rounded group">
        <summary class="cursor-pointer p-4 hover:bg-yellow-100 transition-colors select-none list-none [&::-webkit-details-marker]:hidden">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-yellow-800 inline-flex items-center">
              <svg class="w-5 h-5 mr-2 transform transition-transform group-open:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
              Important Notes
            </h3>
            <span class="text-xs text-yellow-600 font-medium">Click to expand</span>
          </div>
        </summary>
        <div class="px-4 pb-4 text-sm text-yellow-700">
          <ul class="list-disc list-inside space-y-1">
            <li>Only the top 5 pinned items per phrase are displayed in search results</li>
            <li>Changes are available in near real-time after creating pinned results</li>
            <li>Pinned items receive higher boost weights and appear before organic results</li>
            <li>If multiple items have the same phrase, priority determines display order</li>
            <li>Both collections and individual items must be active to appear in results</li>
          </ul>
        </div>
      </details>

      <!-- Example Usage in GraphQL -->
      <details class="bg-green-50 border-l-4 border-green-400 rounded group">
        <summary class="cursor-pointer p-4 hover:bg-green-100 transition-colors select-none list-none [&::-webkit-details-marker]:hidden">
          <div class="flex items-center justify-between">
            <h3 class="text-lg font-semibold text-green-800 inline-flex items-center">
              <svg class="w-5 h-5 mr-2 transform transition-transform group-open:rotate-90" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
              </svg>
              Example Usage in GraphQL
            </h3>
            <span class="text-xs text-green-600 font-medium">Click to expand</span>
          </div>
        </summary>
        <div class="px-4 pb-4 text-sm text-green-700">
          <p class="mb-2">To use pinned results in your GraphQL queries, use the usePinned parameter:</p>
          <pre class="bg-green-100 p-3 rounded text-xs overflow-x-auto"><code>{`
  Content(
    where: { _fulltext: { match: "water" } }
    usePinned: {
      phrase: "water",
      collectionId: "your-collection-id"
    }
  ) {
    items {
      _score
      _id
      Name
      MainBody
    }
  }
`}</code></pre>
          <p class="mt-2 text-xs">Pinned results will appear at the top with higher boost weights when the search phrase matches.</p>
        </div>
      </details>
    </div>

    <!-- Status Messages -->
    {message && (
      <div class={`mb-6 p-4 rounded-md ${messageType === 'success' ? 'bg-green-50 text-green-800 border border-green-200' : 'bg-red-50 text-red-800 border border-red-200'}`}>
        <div class="flex">
          <div class="flex-shrink-0">
            {messageType === 'success' ? (
              <svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clip-rule="evenodd" />
              </svg>
            ) : (
              <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
              </svg>
            )}
          </div>
          <div class="ml-3">
            <p class="text-sm font-medium">{message}</p>
          </div>
        </div>
      </div>
    )}

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 lg:items-start">
      <!-- Left Column: Collections Management -->
      <div class="space-y-8">
        <!-- Browsing Section -->
        <div>
          <h2 class="text-lg font-semibold text-gray-700 mb-4 flex items-center h-7">
            <svg class="w-5 h-5 mr-2 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
            </svg>
            Browse Collections & Items
          </h2>

          <div class="space-y-6">
            <!-- Existing Collections -->
            <div class="bg-white shadow-lg rounded-lg border border-gray-200">
          <div class="px-6 py-4 border-b border-gray-200 bg-gray-50 rounded-t-lg">
            <h2 class="text-xl font-semibold text-gray-900">Existing Collections</h2>
            <p class="text-sm text-gray-600 mt-1">Select a collection to manage its pinned results</p>
          </div>
          <div class="p-6">
            {collections.length === 0 ? (
              <p class="text-gray-500 text-center py-4">No collections found. Create one below to get started.</p>
            ) : (
              <div class="space-y-3">
                {collections.map((collection: any) => (
                  <div class="flex items-center justify-between p-3 border border-gray-200 rounded-md hover:bg-gray-50">
                    <div class="flex items-center space-x-3">
                      <div class={`w-3 h-3 rounded-full ${collection.isActive ? 'bg-green-400' : 'bg-gray-400'}`}></div>
                      <div>
                        <p class="font-medium text-gray-900">{collection.title}</p>
                        <p class="text-xs text-gray-500">ID: {collection.id}</p>
                      </div>
                    </div>
                    <div class="flex items-center space-x-2">
                      <button
                        type="button"
                        onclick={`selectCollection('${collection.id}', '${collection.title.replace(/'/g, "\\\'")}')`}
                        class="text-blue-600 hover:text-blue-800 text-sm font-medium px-2 py-1 rounded hover:bg-blue-50"
                      >
                        Select
                      </button>
                      <button
                        type="button"
                        onclick={`showDeleteDialog('${collection.id}', '${collection.title.replace(/'/g, "\\'")}')`}
                        class="text-red-600 hover:text-red-800 text-sm font-medium px-2 py-1 rounded hover:bg-red-50"
                        title="Delete collection"
                      >
                        Delete
                      </button>
                    </div>
                  </div>
                ))}
              </div>
            )}
          </div>
        </div>

        <!-- Pinned Items in Selected Collection -->
        <div id="pinnedItemsSection" class="bg-white shadow-lg rounded-lg border border-gray-200" style="display: none;">
          <div class="px-6 py-4 border-b border-gray-200 bg-gray-50 rounded-t-lg">
            <h2 class="text-xl font-semibold text-gray-900">
              Items in "<span id="selectedCollectionTitle" class="text-blue-600"></span>"
            </h2>
            <p class="text-sm text-gray-600 mt-1">Manage items pinned in the selected collection.</p>
          </div>
          <div id="pinnedItemsContainer" class="p-6">
            <div id="pinnedItemsLoader" class="text-center py-4 text-gray-500">Loading items...</div>
            <div id="pinnedItemsList" class="space-y-3"></div>
          </div>
        </div>
          </div>
        </div>

        <!-- Creation Section -->
        <div>
          <h2 class="text-lg font-semibold text-gray-700 mb-4 flex items-center h-7">
            <svg class="w-5 h-5 mr-2 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
            </svg>
            Create New Collection
          </h2>

          <!-- Create New Collection -->
          <div class="bg-white shadow-lg rounded-lg border border-gray-200">
          <div class="px-6 py-4 border-b border-gray-200 bg-gray-50 rounded-t-lg">
            <h2 class="text-xl font-semibold text-gray-900">Create Collection</h2>
            <p class="text-sm text-gray-600 mt-1">Collections group pinned results together for management</p>
          </div>
          <form method="POST" class="p-6 space-y-4">
            <input type="hidden" name="action" value="create-collection" />

            <div>
              <label for="collectionTitle" class="block text-sm font-medium text-gray-700 mb-2">
                Collection Title
              </label>
              <input
                type="text"
                id="collectionTitle"
                name="collectionTitle"
                required
                placeholder="e.g., Homepage Promotions"
                class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
            </div>

            <div class="flex items-center">
              <input
                type="checkbox"
                id="collectionActive"
                name="collectionActive"
                checked
                class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
              />
              <label for="collectionActive" class="ml-2 block text-sm text-gray-700">
                Active (collection and its items will be used in search)
              </label>
            </div>

            <button
              type="submit"
              class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700 focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 transition duration-200"
            >
              Create Collection
            </button>
          </form>
        </div>
        </div>

      </div>

      <!-- Right Column: Pinned Items Management -->
      <div class="space-y-8">
        <!-- Search Section -->
        <div>
          <h2 class="text-lg font-semibold text-gray-700 mb-4 flex items-center h-7">
            <svg class="w-5 h-5 mr-2 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
            Search for Content
          </h2>

          <!-- Content Search Helper -->
          <div class="bg-white shadow-lg rounded-lg border border-gray-200">
          <div class="px-6 py-4 border-b border-gray-200 bg-gray-50 rounded-t-lg">
            <h2 class="text-xl font-semibold text-gray-900">Find Content</h2>
            <p class="text-sm text-gray-600 mt-1">Search for content to get its GUID for pinned results</p>
          </div>
          <div class="p-6">
            <div class="flex space-x-2">
              <input
                type="text"
                id="contentSearchInput"
                placeholder="Search for content..."
                class="flex-1 p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
              />
              <button
                type="button"
                id="contentSearchButton"
                onclick="searchContent()"
                class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700 focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition duration-200"
              >
                Search
              </button>
            </div>
          </div>

          <div id="contentSearchResultsContainer" style="display: none;">
            {/* This container is now populated by client-side JavaScript */}
          </div>
        </div>
        </div>

        <!-- Add/Update Section -->
        <div>
          <h2 class="text-lg font-semibold text-gray-700 mb-4 flex items-center h-7">
            <svg class="w-5 h-5 mr-2 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z"></path>
            </svg>
            Add Pinned Result
          </h2>

          <!-- Add Pinned Item -->
          <div class="bg-white shadow-lg rounded-lg border border-gray-200">
          <div class="px-6 py-4 border-b border-gray-200 bg-gray-50 rounded-t-lg">
            <h2 class="text-xl font-semibold text-gray-900">Add Pinned Result</h2>
            <p class="text-sm text-gray-600 mt-1">Add content to be pinned for specific search phrases</p>
          </div>
          <form method="POST" class="p-6 space-y-4">
            <input type="hidden" name="action" value="add-pinned-item" />            
            <input type="hidden" id="selectedCollectionId" name="selectedCollectionId" value="" />
            
            <div id="collectionNotice" class="bg-yellow-50 border border-yellow-200 text-yellow-800 px-4 py-3 rounded-md">
              <p class="text-sm">Please select a collection from the left panel first.</p>
            </div>

            <div id="pinnedItemForm" class="space-y-4" style="display: none;">
              <div>
                <label for="phrases" class="block text-sm font-medium text-gray-700 mb-2">
                  Search Phrases
                </label>
                <textarea 
                  id="phrases" 
                  name="phrases" 
                  rows="3"
                  required
                  placeholder="Enter one phrase per line, e.g.&#10;water bottle&#10;hydration&#10;drink water"
                  class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                ></textarea>
                <p class="text-xs text-gray-500 mt-1">One phrase per line. These phrases will trigger this pinned result.</p>
              </div>

              <div>
                <label for="targetKey" class="block text-sm font-medium text-gray-700 mb-2">
                  Content GUID
                </label>
                <input 
                  type="text" 
                  id="targetKey" 
                  name="targetKey" 
                  required
                  placeholder="e.g., 12345678-1234-5678-9abc-123456789abc"
                  class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                />
                <p class="text-xs text-gray-500 mt-1">The GUID of the content to pin. Use the content search below to find it.</p>
              </div>

              <div class="grid grid-cols-2 gap-4">
                <div>
                  <label for="language" class="block text-sm font-medium text-gray-700 mb-2">
                    Language
                  </label>
                  <input 
                    type="text" 
                    id="language" 
                    name="language" 
                    value="en"
                    placeholder="en"
                    class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                </div>

                <div>
                  <label for="priority" class="block text-sm font-medium text-gray-700 mb-2">
                    Priority
                  </label>
                  <input 
                    type="number" 
                    id="priority" 
                    name="priority" 
                    value="1"
                    min="1"
                    max="100"
                    class="w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                  />
                  <p class="text-xs text-gray-500 mt-1">Higher priority items appear first (1-100)</p>
                </div>
              </div>

              <div class="flex items-center">
                <input 
                  type="checkbox" 
                  id="itemActive" 
                  name="itemActive" 
                  checked
                  class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
                />
                <label for="itemActive" class="ml-2 block text-sm text-gray-700">
                  Active (item will be used in search results)
                </label>
              </div>

              <button 
                type="submit"
                class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700 focus:ring-2 focus:ring-green-500 focus:ring-offset-2 transition duration-200"
              >
                Add Pinned Result
              </button>
            </div>
          </form>
        </div>
        </div>
      </div>
    </div>

  </div>

  <!-- Delete Collection Confirmation Dialog -->
  <div id="deleteDialog" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full hidden z-50">
    <div class="relative top-20 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
      <div class="mt-3 text-center">
        <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100">
          <svg class="h-6 w-6 text-red-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z" />
          </svg>
        </div>
        <h3 class="text-lg leading-6 font-medium text-gray-900 mt-4">Delete Collection</h3>
        <div class="mt-2 px-7 py-3">
          <p class="text-sm text-gray-500">
            Are you sure you want to delete the collection "<span id="deleteCollectionName" class="font-semibold"></span>"? 
            This action cannot be undone and will remove all pinned results in this collection.
          </p>
        </div>
        <div class="items-center px-4 py-3">
          <input type="hidden" id="deleteCollectionId" value="" />
          <input type="hidden" id="deleteCollectionTitle" value="" />
          <button 
            type="button"
            onclick="deleteCollection()"
            class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-24 mr-2 hover:bg-red-600 focus:outline-none focus:ring-2 focus:ring-red-300"
          >
            Delete
          </button>
          <button 
            type="button"
            onclick="hideDeleteDialog()"
            class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-24 hover:bg-gray-600 focus:outline-none focus:ring-2 focus:ring-gray-300"
          >
            Cancel
          </button>
        </div>
      </div>
    </div>
  </div>

  <script is:inline>
    // Define functions in global scope
    window.selectedCollectionData = null;

    window.selectCollection = function(collectionId, collectionTitle) {
      // Show and update the pinned items section
      const pinnedItemsSection = document.getElementById('pinnedItemsSection');
      const pinnedItemsList = document.getElementById('pinnedItemsList');
      const pinnedItemsLoader = document.getElementById('pinnedItemsLoader');
      const selectedCollectionTitleEl = document.getElementById('selectedCollectionTitle');

      pinnedItemsSection.style.display = 'block';
      selectedCollectionTitleEl.textContent = collectionTitle;
      pinnedItemsLoader.style.display = 'block';
      pinnedItemsList.innerHTML = '';

      // Fetch and render pinned items for the selected collection
      fetch(`/api/pinned-items?collectionId=${collectionId}`)
        .then(response => response.json())
        .then(data => {
          pinnedItemsLoader.style.display = 'none';
          if (data.success && Array.isArray(data.data)) {
            renderPinnedItems(data.data);
          } else {
            pinnedItemsList.innerHTML = `<p class="text-red-500">Error: ${data.message || 'Could not load items.'}</p>`;
          }
        });

      window.selectedCollectionData = { id: collectionId, title: collectionTitle };
      
      // Update UI
      document.getElementById('selectedCollectionId').value = collectionId;
      document.getElementById('collectionNotice').style.display = 'none';
      document.getElementById('pinnedItemForm').style.display = 'block';
      
      // Update notice to show selected collection
      const notice = document.getElementById('collectionNotice');
      notice.innerHTML = `<p class="text-sm">Selected collection: <strong>${collectionTitle}</strong></p>`;
      notice.className = 'bg-green-50 border border-green-200 text-green-800 px-4 py-3 rounded-md';
      notice.style.display = 'block';
    };

    window.renderPinnedItems = function(items) {
      const listEl = document.getElementById('pinnedItemsList');
      listEl.innerHTML = ''; // Clear previous items

      if (items.length === 0) {
        listEl.innerHTML = '<p class="text-gray-500 text-center py-4">No pinned items in this collection.</p>';
        return;
      }

      items.forEach(item => {
        const phrasesHtml = item.phrases.split('\n').map(p => `<span class="inline-block bg-gray-200 rounded-full px-2 py-1 text-xs font-semibold text-gray-700 mr-2 mb-1">${p}</span>`).join('');
        const itemHtml = `
          <div id="pinned-item-${item.id}" class="p-3 border border-gray-200 rounded-md">
            <div class="flex items-start justify-between">
              <div>
                <div class="mb-2">${phrasesHtml}</div>
                <p class="text-xs text-gray-500 font-mono" title="Content GUID">${item.targetKey}</p>
              </div>
              <button 
                type="button"
                onclick="deletePinnedItem('${window.selectedCollectionData.id}', '${item.id}')"
                class="text-red-500 hover:text-red-700 text-sm font-medium px-2 py-1 rounded hover:bg-red-50"
                title="Delete pinned item"
              >
                Delete
              </button>
            </div>
          </div>
        `;
        listEl.insertAdjacentHTML('beforeend', itemHtml);
      });
    };

    window.deletePinnedItem = function(collectionId, itemId) {
      if (!confirm('Are you sure you want to delete this pinned item?')) return;

      fetch('/api/pinned-items', {
        method: 'DELETE',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ collectionId, itemId })
      }).then(() => {
        document.getElementById(`pinned-item-${itemId}`)?.remove();
      });
    };

    window.searchContent = async function() {
      const searchInput = document.getElementById('contentSearchInput');
      const searchButton = document.getElementById('contentSearchButton');
      const resultsContainer = document.getElementById('contentSearchResultsContainer');
      
      const query = searchInput.value.trim();
      if (!query) return;

      // Show loading state
      const originalButtonText = searchButton.innerHTML;
      searchButton.innerHTML = 'Searching...';
      searchButton.disabled = true;

      try {
        const response = await fetch('/api/content-search', {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ query: query, limit: 10 })
        });

        const result = await response.json();
        resultsContainer.innerHTML = ''; // Clear previous results

        if (result.success && result.data.length > 0) {
          const itemsHtml = result.data.map(item => `
            <div class="flex items-center justify-between p-3 border border-gray-200 rounded-md hover:bg-gray-50">
              <div>
                <p class="font-medium text-gray-900 text-sm">
                  ${item.name || 'Untitled'}
                  ${item.url ? ` <a href="${item.url}" target="_blank" rel="noopener noreferrer" class="text-blue-600 hover:underline text-xs ml-2" title="Open content in new tab">[view page]</a>` : ''}
                </p>
                <p class="text-xs text-gray-500 font-mono">${item.guid}</p>
                <p class="text-xs text-gray-400">${item.contentType} • ${item.language}</p>
              </div>
              <button type="button" onclick="copyGuid('${item.guid}', event)" class="text-blue-600 hover:text-blue-800 text-sm font-medium">
                Select Page
              </button>
            </div>
          `).join('');
          resultsContainer.innerHTML = `<div class="px-6 pb-6"><h3 class="font-medium text-gray-900 mb-3">Search Results:</h3><div class="space-y-2 max-h-64 overflow-y-auto">${itemsHtml}</div></div>`;
        } else {
          resultsContainer.innerHTML = `<div class="px-6 pb-6 text-sm text-gray-500">${result.message || 'No results found.'}</div>`;
        }
        resultsContainer.style.display = 'block';
      } finally {
        searchButton.innerHTML = originalButtonText;
        searchButton.disabled = false;
      }
    };

    window.copyGuid = function(guid, event) {
      document.getElementById('targetKey').value = guid;

      // Show feedback
      const button = event.target;
      const originalText = button.textContent;
      button.textContent = 'Copied!';
      button.className = 'text-green-600 hover:text-green-800 text-sm font-medium';

      setTimeout(() => {
        button.textContent = originalText;
        button.className = 'text-blue-600 hover:text-blue-800 text-sm font-medium';
      }, 2000);
    };

    window.showDeleteDialog = function(collectionId, collectionTitle) {
      console.log('showDeleteDialog called with:', collectionId, collectionTitle);
      
      const deleteDialog = document.getElementById('deleteDialog');
      const deleteCollectionId = document.getElementById('deleteCollectionId');
      const deleteCollectionTitle = document.getElementById('deleteCollectionTitle');
      const deleteCollectionName = document.getElementById('deleteCollectionName');
      
      if (!deleteDialog || !deleteCollectionId || !deleteCollectionTitle || !deleteCollectionName) {
        console.error('Delete dialog elements not found');
        return;
      }
      
      deleteCollectionId.value = collectionId;
      deleteCollectionTitle.value = collectionTitle;
      deleteCollectionName.textContent = collectionTitle;
      deleteDialog.classList.remove('hidden');
      
      // Prevent body scrolling when dialog is open
      document.body.style.overflow = 'hidden';
    };

    window.hideDeleteDialog = function() {
      document.getElementById('deleteDialog').classList.add('hidden');
      
      // Restore body scrolling
      document.body.style.overflow = 'auto';
    };

    window.deleteCollection = function() {
      const collectionId = document.getElementById('deleteCollectionId').value;
      const collectionTitle = document.getElementById('deleteCollectionTitle').value;
      
      if (!collectionId) {
        alert('No collection selected for deletion.');
        return;
      }
      
      const deleteButton = document.querySelector('#deleteDialog button[onclick="deleteCollection()"]');
      deleteButton.textContent = 'Deleting...';
      deleteButton.disabled = true;

      // Create form HTML directly and submit
      const formHtml = `
        <form method="POST" action="/opti-admin/graph-pinnedresults">
          <input type="hidden" name="action" value="delete-collection">
          <input type="hidden" name="collectionId" value="${collectionId}">
          <input type="hidden" name="collectionTitle" value="${collectionTitle}">
        </form>
      `;
      
      const tempDiv = document.createElement('div');
      tempDiv.innerHTML = formHtml;
      const form = tempDiv.querySelector('form');
      document.body.appendChild(form);
      form.submit();
    };

    // Initialize event listeners when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Close dialog when clicking outside
      const deleteDialog = document.getElementById('deleteDialog');
      if (deleteDialog) {
        deleteDialog.addEventListener('click', function(e) {
          if (e.target === this) {
            window.hideDeleteDialog();
          }
        });
      }

      // Close dialog with Escape key
      document.addEventListener('keydown', function(e) {
        if (e.key === 'Escape' && !document.getElementById('deleteDialog').classList.contains('hidden')) {
          window.hideDeleteDialog();
        }
      });

      // Allow searching with Enter key
      document.getElementById('contentSearchInput').addEventListener('keydown', function(e) {
        if (e.key === 'Enter') {
          e.preventDefault();
          window.searchContent();
        }
      });
    });
  </script>
</AdminLayout>
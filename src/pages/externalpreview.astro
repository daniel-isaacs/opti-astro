---
import qs from 'query-string';

import type { Locales } from 'astro';
import Component from '../cms/components/_Component.astro';
import Experiences from '../cms/experiences/_Experiences.astro';
import { getOptimizelySdk } from '../graphql/getSdk';
import type { ContentPayload } from '../graphql/shared/ContentPayload';
import Pages from '../cms/pages/_Pages.astro';

const extPreviewPayload = qs.parse(
    Astro.url.search
) as unknown as ContentPayload;
extPreviewPayload.loc = Astro.currentLocale || 'en';
extPreviewPayload.ctx = 'ext_preview';

const optiPreviewResponse = await getOptimizelySdk(
    extPreviewPayload
).contentById({
    key: extPreviewPayload.key,
    //@ts-ignore
    loc: extPreviewPayload.loc as unknown as Locales,
    ver: extPreviewPayload.ver,
});

const types = optiPreviewResponse?._Content?.item?._metadata?.types;
//@ts-ignore
extPreviewPayload.types = types;

const isComponentType = types?.includes('_Component');
const isExperienceType = types?.includes('_Experience');
const isPageType = types?.includes('_Page') && isExperienceType === false;
---

<>
    {!types && <h1 class="text-center text-5xl">Let's create some content</h1>}
    {isComponentType && <Component data={extPreviewPayload} />}
    {isExperienceType && <Experiences data={extPreviewPayload} />}
    {isPageType && <Pages data={extPreviewPayload} />}
</>
